{{>admin-head-html}}
<div class="screen-overlay"></div>
{{>admin-navbar}}
<main class="main-wrap">
    {{>admin-header}}
    <section class="content-main">
        <div class="content-header">
            <div>
                <h2 class="content-title card-title">Order List </h2>
                <p>Lorem ipsum dolor sit amet.</p>
            </div>
            <div>
                {{!-- <input type="text" onchange="filterTableRows()" placeholder="Search..." class="form-control"
                    id="searchInput"> --}}
            </div>
        </div>
        <div class="card mb-4">
            <input type="hidden" value="{{count}}" id="total-pages">
            <header class="card-header">
                <div class="row gx-3">
                    <div class="col-lg-2 col-md-4 ">
                        <input type="text" oninput="filterTableRows()" placeholder="Search..." class="form-control"
                            id="searchInput">
                    </div>
                    <div class="col-lg-2 col-md-4 me-auto">
                        <select class="form-select" id="sort">
                            <option selected disabled>Sort</option>
                            <option>By date</option>
                            <option>By Price</option>
                        </select>
                    </div>
                    <div class="col-lg-2 col-4 col-md-3">
                        <select class="form-select" id="statusSelect" onchange="filterTableByStatus()">
                            <option>Status</option>
                            <option value="all">Show all</option>
                            <option value="placed">Placed</option>
                            <option value="confirmed">Confirmed</option>
                            <option value="completed">Completed</option>
                            <option value="delivery">Out for delivery</option>
                            <option value="cancelled">Cancelled</option>
                            <option value="shipped">Shipped</option>
                        </select>


                    </div>
                    <div class="col-lg-2 col-6 col-md-3">
                        <select class="form-select">
                            <option>Show 20</option>
                            <option>Show 30</option>
                            <option>Show 40</option>
                        </select>
                    </div>
                </div>
            </header> <!-- card-header end// -->
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover" id="userTable">
                        <thead>
                            <tr>
                                <th>#ID</th>
                                <th scope="col">Name</th>
                                <th scope="col">Mobile</th>
                                <th>
                                    <div style="display: inline-flex; align-items: center;">
                                        <div>Total</div>
                                        <div class="ms-2"
                                            style="display: flex; flex-direction: column;width: 2em;height: 2em;">
                                            <div style="height: 1em; cursor: pointer;">
                                                <button onclick="sortByAmount('asc')" style="border: none;"><i
                                                        class="fas fa-chevron-up"
                                                        style="display: inline-block;"></i></button>
                                            </div>
                                            <div style="height: 1em;cursor: pointer;">
                                                <button onclick="sortByAmount('desc')" style="border:none"><i
                                                        class="fas fa-chevron-down"
                                                        style="display: inline-block;"></i></button>
                                            </div>
                                        </div>
                                    </div>
                                </th>
                </div>
            </div>
        </div>
        </th>
        <th>
            <div style="display: inline-flex; align-items: center;">
                <div>Date</div>
                <div class="ms-2" style="display: flex; flex-direction: column;width: 2em;height: 2em;">
                    <div style="height: 1em; cursor: pointer;" class="">
                        <button style="border: none;" onclick="sortByDate('asc')"><i class="fas fa-chevron-up"
                                style="display: inline-block;"></i></button>
                    </div>
                    <div style="height: 1em;cursor: pointer;">
                        <button style="border: none;" onclick="sortByDate('desc')"><i class="fas fa-chevron-down"
                                style="display: inline-block;"></i></button>
                    </div>
                </div>
            </div>
        </th>
        <th scope="col">Status</th>
        <th scope="col">Actions</th>
        <th scope="col">More</th>
        </tr>
        </thead>
        <tbody>
        </tbody>
        </table>
        </div> 
        </div> 
        </div> 

        <div class="pagination-area mt-15 mb-50">
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-start" id="pagination">

                </ul>
            </nav>
        </div>


    </section> <!-- content-main end// -->
    {{>admin-footer}}



    {{!-- For pagination --}}

    <script>
      

        // Function to return the appropriate class name based on status
        function getStatusClass(status) {
            switch (status) {
                case 'placed':
                    return 'badge rounded-pill alert-success';
                case 'pending':
                    return 'badge rounded-pill alert-warning';
                case 'cancelled':
                    return 'badge rounded-pill alert-danger';
                case 'confirmed':
                    return 'badge rounded-pill alert-warning'
                case 'shipped':
                    return 'badge rounded-pill alert-primary'
                case 'delivery':
                    return 'badge rounded-pill alert-info'
                case 'completed':
                    return 'badge rounded-pill alert-secondary'
                default:
                    return 'badge rounded-pill';
            }
        }
        var counter = 1
        const limitAndSkipDocuments = (pageNumber) => {
            $.ajax({
                url: `/admin/limit-and-skip-documents?pageNo=${pageNumber}`,
                method: "GET",
                success: (response) => {


                    var tbody = $('#userTable tbody');
                    tbody.empty();
                    // Loop through the data and add rows to the table
                    
                    $.each(response, function (index, value) {
                        // Create a new row and set the content of the cells
                        var newRow = $('<tr>');
                        if(counter ==0 )counter=1 
                        newRow.append($('<td>').text(counter));
                        counter++;
                        newRow.append($('<td>').text(value.name));
                        newRow.append($('<td>').text(value.mobile));
                        newRow.append($('<td>').text(formatMoneyINR(value.offerTotal)));
                        newRow.append($('<td>').text(formatDate(value.date)));
                        // Create a new status span element with a unique id
                        const statusSpan = $('<span>').attr('id', 'statusSpan_' + value._id).addClass(getStatusClass(value.status)).text(value.status);

                        // Create a new td element with a unique id
                        const statusTd = $('<td>').attr('id', 'statusTd_' + value._id);

                        // Append the status span to the td element
                        statusTd.append(statusSpan);

                        // Append the td element to the new row
                        newRow.append(statusTd);
                        // Create the select element and options for changing status
                        var statusSelect = $('<select>').addClass('form-select form-select-sm')
                            .css({ 'font-size': '13px', 'width': '140px' })
                            .on('change', function () {
                                changeOrderStatus(value._id, this.value);
                            })
                            .append($('<option>').prop('selected', true).prop('disabled', true).text('Change status'))
                            .append($('<option>').val('placed').text('Placed'))
                            .append($('<option>').val('confirmed').text('Confirmed'))
                            .append($('<option>').val('shipped').text('Shipped'))
                            .append($('<option>').val('delivery').text('Delivery'))
                            .append($('<option>').val('completed').text('Completed'));

                        // Append the select element to the cell
                        newRow.append($('<td>').addClass('status-buttons').append(statusSelect));

                        // Create the details button
                        var detailsButton = $('<a>').addClass('btn btn-md rounded font-sm')
                            .prop('href', '/admin/dashboard/admin-view-orders/view-order-details/' + value._id)
                            .text('Details');

                        // Append the details button to the cell
                        newRow.append($('<td>').append(detailsButton));

                        // Add the new row to the table
                        $('#userTable tbody').append(newRow);
                    });
                    console.log(response)

                },
                error: (error) => {
                    console.log(error)
                }
            })
        }

        function formatMoneyINR(amount) {
            // convert to string and split into integer and decimal parts
            if (!amount) return
            var parts = amount.toFixed(2).toString().split('.');

            // format the integer part with commas every 3 digits
            var integerPart = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            // join the integer and decimal parts and add the Indian Rupee symbol
            var formattedAmount = '₹' + integerPart + '.' + parts[1];

            return formattedAmount;
        }
        function formatDate(dateString) {
            // create a Date object from the input string
            var date = new Date(dateString);

            // define arrays for month names and AM/PM labels
            var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            var amPmLabels = ['AM', 'PM'];

            // extract the date and time components from the Date object
            var year = date.getFullYear();
            var monthIndex = date.getMonth();
            var day = date.getDate();
            var hour = date.getHours() % 12;
            var minute = date.getMinutes();
            var amPmIndex = Math.floor(date.getHours() / 12);

            // format the date string using the extracted components and the arrays
            var formattedDate = monthNames[monthIndex] + ' ' + day + ', ' + year + ', ' + hour + ':' + (minute < 10 ? '0' : '') + minute + ' ' + amPmLabels[amPmIndex];

            return formattedDate;
        }

        var pageIdx=1
        $(document).ready(function () {
            const totalPages = Math.ceil($('#total-pages').val() / 7)
            console.log(totalPages)
            var $pagination = $('#pagination');
            $pagination.empty();

            if (totalPages > 1) {
                var activePage = 1;
                var maxPagesToShow = 3;
                var dotsAfterPage = 3;

                $pagination.append('<li class="page-item" id="previousPage"><a class="page-link" aria-label="Previous"><span aria-hidden="true">&laquo;</span><span class="sr-only">Previous</span></a></li>');
                    for ( var i = 1 ; i <= totalPages; i++) {

                    if (i == activePage) {
                        $pagination.append('<li class="page-item active" data-page="' + i + '"><a class="page-link page-number">' + i + '</a></li>');
                    } else if ((i <= maxPagesToShow) || (i > activePage - dotsAfterPage && i < activePage + dotsAfterPage) || (i > totalPages - maxPagesToShow)) {
                        $pagination.append('<li class="page-item" data-page="' + i + '"><a class="page-link page-number">' + i + '</a></li>');
                    } else if ($pagination.find('.dot').length == 0) {
                        $pagination.append('<li class="page-item"><a class="page-link dot">...</a></li>');
                    }
                }
    
             
                $pagination.append('<li class="page-item" id="nextPage"><a class="page-link" aria-label="Next"><span aria-hidden="true">&raquo;</span><span class="sr-only">Next</span></a></li>');

                $pagination.on('click', '.page-number', function () {
                    activePage = $(this).parent().data('page');
                    if(activePage == 1) counter = 0
                    else counter = activePage*7
                    console.log(activePage)
                    limitAndSkipDocuments(activePage);
                    $pagination.find('.active').removeClass('active');
                    $(this).parent().addClass('active');
                });

                $pagination.on('click', '#previousPage', function () {
                    console.log(activePage+"beforeprev")
                    if(activePage == 2) counter = 0
                    else counter = (activePage -1) *7
                    console.log(counter+"prev")
                    if (activePage > 1) {
                        activePage--;
                        limitAndSkipDocuments(activePage);
                        console.log(activePage)

                        $pagination.find('.active').removeClass('active');
                        $pagination.find('li[data-page="' + activePage + '"]').addClass('active');
                    }
                });

                $pagination.on('click', '#nextPage', function () {
                    
                    if (activePage < totalPages) {
                        activePage++;
                        limitAndSkipDocuments(activePage);
                        console.log(activePage)

                        $pagination.find('.active').removeClass('active');
                        $pagination.find('li[data-page="' + activePage + '"]').addClass('active');
                    }
                });
            }
        });

    $(document).ready(() => {
            limitAndSkipDocuments(1)
        })




    </script>


    <script>
        //sort by total amount 
        function sortByAmount(type) {
            let rows = Array.from(document.querySelectorAll("#userTable tbody tr"));
            rows.sort((row1, row2) => {
                let value1 = parseFloat(row1.cells[3].textContent.replace(/[^0-9.-]+/g, ""));
                let value2 = parseFloat(row2.cells[3].textContent.replace(/[^0-9.-]+/g, ""));
                if (type === 'asc') {
                    return value1 - value2;
                } else {
                    return value2 - value1;
                }
            });
            rows.forEach(row => {
                document.querySelector("#userTable tbody").appendChild(row);
            });
        }
        $(document).ready(function () {
            // Call sortByDate function with the default sorting order (descending)
            sortByDate('desc');
        });


        //sort by date
        function sortByDate(order) {
            var rows = $('#userTable tbody tr').get();
            rows.sort(function (a, b) {
                var A = $(a).children('td').eq(4).text().toUpperCase();
                var B = $(b).children('td').eq(4).text().toUpperCase();
                if (A < B) {
                    return order === 'asc' ? -1 : 1;
                }
                if (A > B) {
                    return order === 'asc' ? 1 : -1;
                }
                return 0;
            });
            $.each(rows, function (index, row) {
                $('#userTable tbody').append(row);
            });
        }
    </script>
    <script>
        const changeOrderStatus = (orderId, newStatus) => {
            const currStatus = $('#statusSpan_' + orderId).text()
            console.log(orderId, currStatus, newStatus)

            $.ajax({
                url: "/admin/change-product-status",
                data: {
                    orderId: orderId,
                    currentStatus: currStatus,
                    newStatus: newStatus
                },
                method: 'post',
                success: (res) => {
                    console.log(getStatusClass(currStatus))
                    console.log(getStatusClass(newStatus))
                    const statusSpan = $('#statusSpan_' + orderId);
                    statusSpan.removeClass()
                    console.log(statusSpan)

                    statusSpan.addClass(getStatusClass(newStatus)).text(newStatus);


                },
                error: (error) => {

                }
            })
        }


        const viewMoreOrders = (orderId) => {
            console.log(orderId);
            $.ajax({
                url: "/admin/view-order-details",
                data: {
                    orderId: orderId
                },
                method: 'get',
                success: () => {

                }
            })
        }

        function filterTableRows() {
            var searchInput = document.getElementById("searchInput");
            var filter = searchInput.value.toUpperCase();
            var table = document.getElementById("userTable");
            var rows = table.getElementsByTagName("tr");
            var numRows = rows.length;
            var headerRow = rows[0];
            var dataRows = [];

            for (var i = 1; i < numRows; i++) {
                dataRows.push(rows[i]);
            }

            var matchingRows = [];

            for (var i = 0; i < dataRows.length; i++) {
                var nameCell = dataRows[i].getElementsByTagName("td")[1];
                if (nameCell) {
                    var name = nameCell.textContent || nameCell.innerText;
                    if (name.toUpperCase().indexOf(filter) > -1) {
                        matchingRows.push(dataRows[i]);
                    }
                }
            }

            headerRow.style.display = (matchingRows.length > 0) ? "" : "none";

            for (var i = 0; i < dataRows.length; i++) {
                dataRows[i].style.display = "none";
            }

            var noMatchesRow = table.querySelector("tr:last-of-type");
            if (noMatchesRow && noMatchesRow.cells[0].innerHTML === "No matches found.") {
                table.deleteRow(-1);
            }

            if (matchingRows.length === 0) {
                noMatchesRow = table.insertRow(-1);
                var noMatchesCell = noMatchesRow.insertCell(0);
                noMatchesCell.colSpan = numRows;
                noMatchesCell.innerHTML = "No matches found.";
            } else {
                for (var i = 0; i < matchingRows.length; i++) {
                    matchingRows[i].style.display = "";
                }
            }
        }

        function filterTableByStatus() {
            var selectBox = document.getElementById("statusSelect");
            var status = selectBox.options[selectBox.selectedIndex].value;
            var rows = document.querySelectorAll("#userTable tbody tr");
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                var rowStatus = row.querySelector("td:nth-child(6)").textContent.trim().toLowerCase();
                if (status === "all" || rowStatus === status.toLowerCase()) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            }
        }

    </script>